{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\n\nconst useCustomForm = ({\n  initialValues,\n  onSubmit\n}) => {\n  const [values, setValues] = useState(initialValues || {});\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n  const [onSubmitting, setOnSubmitting] = useState(false);\n  const [onBlur, setOnBlur] = useState(false);\n  const formRendered = useRef(true);\n  useEffect(() => {\n    if (formRendered.current) {\n      setValues(initialValues);\n      setErrors({});\n      setTouched({});\n      setOnSubmitting(false);\n      setOnBlur(false);\n    }\n\n    formRendered.current = false;\n  }, [initialValues]);\n\n  const handleChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      name,\n      value\n    } = target;\n    event.persist();\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleBlur = event => {\n    const {\n      target\n    } = event;\n    const {\n      name\n    } = target;\n    setTouched({ ...touched,\n      [name]: true\n    });\n    setErrors({ ...errors\n    });\n  };\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    setErrors({ ...errors\n    });\n    onSubmit({\n      values,\n      errors\n    });\n  };\n\n  return {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  };\n};\n\nexport default useCustomForm;","map":{"version":3,"sources":["/Users/quonnbernard/REDUX-CART/react-redux-cart/react-cart/src/hooks/useCustomForm.js"],"names":["useState","useEffect","useRef","useCustomForm","initialValues","onSubmit","values","setValues","errors","setErrors","touched","setTouched","onSubmitting","setOnSubmitting","onBlur","setOnBlur","formRendered","current","handleChange","event","target","name","value","persist","handleBlur","handleSubmit","preventDefault"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,aADqB;AAErBC,EAAAA;AAFqB,CAAD,KAGhB;AACJ,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACI,aAAa,IAAI,EAAlB,CAApC;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMgB,YAAY,GAAGd,MAAM,CAAC,IAAD,CAA3B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,YAAY,CAACC,OAAjB,EAA0B;AACxBV,MAAAA,SAAS,CAACH,aAAD,CAAT;AACAK,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,MAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAE,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AACDC,IAAAA,YAAY,CAACC,OAAb,GAAuB,KAAvB;AACD,GATQ,EASN,CAACb,aAAD,CATM,CAAT;;AAWA,QAAMc,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAaD,KAAnB;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,MAAxB;AACAD,IAAAA,KAAK,CAACI,OAAN;AACAhB,IAAAA,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAa,OAACe,IAAD,GAAQC;AAArB,KAAD,CAAT;AACH,GALC;;AAOA,QAAME,UAAU,GAAIL,KAAD,IAAW;AAC5B,UAAM;AAAEC,MAAAA;AAAF,QAAaD,KAAnB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAWD,MAAjB;AACAT,IAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAc,OAACW,IAAD,GAAQ;AAAtB,KAAD,CAAV;AACAZ,IAAAA,SAAS,CAAC,EAAE,GAAGD;AAAL,KAAD,CAAT;AACH,GALC;;AAOA,QAAMiB,YAAY,GAAIN,KAAD,IAAW;AAC9B,QAAIA,KAAJ,EAAWA,KAAK,CAACO,cAAN;AACXjB,IAAAA,SAAS,CAAC,EAAE,GAAGD;AAAL,KAAD,CAAT;AACAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAF;AAAUE,MAAAA;AAAV,KAAD,CAAR;AACD,GAJD;;AAMA,SAAO;AACLF,IAAAA,MADK;AAELE,IAAAA,MAFK;AAGLE,IAAAA,OAHK;AAILQ,IAAAA,YAJK;AAKLM,IAAAA,UALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAnDD;;AAqDA,eAAetB,aAAf","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nconst useCustomForm = ({\n  initialValues,\n  onSubmit\n}) => {\n  const [values, setValues] = useState(initialValues || {});\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n  const [onSubmitting, setOnSubmitting] = useState(false);\n  const [onBlur, setOnBlur] = useState(false);\n\n  const formRendered = useRef(true);\n\n  useEffect(() => {\n    if (formRendered.current) {\n      setValues(initialValues);\n      setErrors({});\n      setTouched({});\n      setOnSubmitting(false);\n      setOnBlur(false);\n    }\n    formRendered.current = false;\n  }, [initialValues]);\n\n  const handleChange = (event) => {\n    const { target } = event;\n    const { name, value } = target;\n    event.persist();\n    setValues({ ...values, [name]: value });\n};\n\n  const handleBlur = (event) => {\n    const { target } = event;\n    const { name } = target;\n    setTouched({ ...touched, [name]: true });\n    setErrors({ ...errors });\n};\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    setErrors({ ...errors });\n    onSubmit({ values, errors });\n  };\n\n  return {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  };\n};\n\nexport default useCustomForm;"]},"metadata":{},"sourceType":"module"}